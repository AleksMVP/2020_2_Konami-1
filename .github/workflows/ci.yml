name: CI

on: [push]

jobs:
  lint:
    name: linter
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v1
      - name: golangci-lint
        uses: reviewdog/action-golangci-lint@v1
        with:
          workdir: ./
  test:
    name: tests
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.14.x'
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Main Service Test
        run: go test -coverprofile=coverage1.out -coverpkg=./... -cover ./... && cat coverage1.out | grep -v easyjson | grep -v mock | grep -v server | grep -v proto | grep -v csrf_dispatcher > cover.out && go tool cover -func=cover.out
  deploy:
    if: github.ref == 'refs/heads/deploy'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Push to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSHKEY }}
          script: >
            cd ${{ secrets.PROJECT_PATH }} && git pull && docker build -t server . &&
            docker build -t csrf_server -f ./csrf/Dockerfile . &&
            docker build -t auth_server -f ./auth/Dockerfile . &&
            docker-compose -d up