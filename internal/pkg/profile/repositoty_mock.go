// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package profile is a generated GoMock package.
package profile

import (
	gomock "github.com/golang/mock/gomock"
	models "konami_backend/internal/pkg/models"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockRepository) GetAll(params FilterParams) ([]models.ProfileCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", params)
	ret0, _ := ret[0].([]models.ProfileCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockRepositoryMockRecorder) GetAll(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepository)(nil).GetAll), params)
}

// GetUserSubscriptionIds mocks base method
func (m *MockRepository) GetUserSubscriptionIds(params FilterParams) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSubscriptionIds", params)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSubscriptionIds indicates an expected call of GetUserSubscriptionIds
func (mr *MockRepositoryMockRecorder) GetUserSubscriptionIds(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSubscriptionIds", reflect.TypeOf((*MockRepository)(nil).GetUserSubscriptionIds), params)
}

// GetUserSubscriptions mocks base method
func (m *MockRepository) GetUserSubscriptions(params FilterParams) ([]models.ProfileCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSubscriptions", params)
	ret0, _ := ret[0].([]models.ProfileCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSubscriptions indicates an expected call of GetUserSubscriptions
func (mr *MockRepositoryMockRecorder) GetUserSubscriptions(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSubscriptions", reflect.TypeOf((*MockRepository)(nil).GetUserSubscriptions), params)
}

// CheckUserSubscription mocks base method
func (m *MockRepository) CheckUserSubscription(authorId, targetId int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserSubscription", authorId, targetId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserSubscription indicates an expected call of CheckUserSubscription
func (mr *MockRepositoryMockRecorder) CheckUserSubscription(authorId, targetId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserSubscription", reflect.TypeOf((*MockRepository)(nil).CheckUserSubscription), authorId, targetId)
}

// CreateSubscription mocks base method
func (m *MockRepository) CreateSubscription(authorId, targetId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", authorId, targetId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription
func (mr *MockRepositoryMockRecorder) CreateSubscription(authorId, targetId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockRepository)(nil).CreateSubscription), authorId, targetId)
}

// RemoveSubscription mocks base method
func (m *MockRepository) RemoveSubscription(authorId, targetId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSubscription", authorId, targetId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSubscription indicates an expected call of RemoveSubscription
func (mr *MockRepositoryMockRecorder) RemoveSubscription(authorId, targetId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSubscription", reflect.TypeOf((*MockRepository)(nil).RemoveSubscription), authorId, targetId)
}

// GetProfile mocks base method
func (m *MockRepository) GetProfile(reqAuthorId, userId int) (models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", reqAuthorId, userId)
	ret0, _ := ret[0].(models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile
func (mr *MockRepositoryMockRecorder) GetProfile(reqAuthorId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockRepository)(nil).GetProfile), reqAuthorId, userId)
}

// EditProfile mocks base method
func (m *MockRepository) EditProfile(update models.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditProfile", update)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditProfile indicates an expected call of EditProfile
func (mr *MockRepositoryMockRecorder) EditProfile(update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProfile", reflect.TypeOf((*MockRepository)(nil).EditProfile), update)
}

// EditProfilePic mocks base method
func (m *MockRepository) EditProfilePic(userId int, imgSrc string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditProfilePic", userId, imgSrc)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditProfilePic indicates an expected call of EditProfilePic
func (mr *MockRepositoryMockRecorder) EditProfilePic(userId, imgSrc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProfilePic", reflect.TypeOf((*MockRepository)(nil).EditProfilePic), userId, imgSrc)
}

// Create mocks base method
func (m *MockRepository) Create(p models.Profile) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockRepositoryMockRecorder) Create(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), p)
}

// GetCredentials mocks base method
func (m *MockRepository) GetCredentials(login string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentials", login)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCredentials indicates an expected call of GetCredentials
func (mr *MockRepositoryMockRecorder) GetCredentials(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockRepository)(nil).GetCredentials), login)
}

// GetLabel mocks base method
func (m *MockRepository) GetLabel(userId int) (models.ProfileLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabel", userId)
	ret0, _ := ret[0].(models.ProfileLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabel indicates an expected call of GetLabel
func (mr *MockRepositoryMockRecorder) GetLabel(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabel", reflect.TypeOf((*MockRepository)(nil).GetLabel), userId)
}

// GetTagSubscriptions mocks base method
func (m *MockRepository) GetTagSubscriptions(userId int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagSubscriptions", userId)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagSubscriptions indicates an expected call of GetTagSubscriptions
func (mr *MockRepositoryMockRecorder) GetTagSubscriptions(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagSubscriptions", reflect.TypeOf((*MockRepository)(nil).GetTagSubscriptions), userId)
}
