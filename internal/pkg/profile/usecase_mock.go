// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package profile is a generated GoMock package.
package profile

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	models "konami_backend/internal/pkg/models"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockUseCase) GetAll() ([]models.ProfileCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.ProfileCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockUseCaseMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUseCase)(nil).GetAll))
}

// GetUserSubscriptions mocks base method
func (m *MockUseCase) GetUserSubscriptions(userId int) ([]models.ProfileCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSubscriptions", userId)
	ret0, _ := ret[0].([]models.ProfileCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSubscriptions indicates an expected call of GetUserSubscriptions
func (mr *MockUseCaseMockRecorder) GetUserSubscriptions(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSubscriptions", reflect.TypeOf((*MockUseCase)(nil).GetUserSubscriptions), userId)
}

// CreateSubscription mocks base method
func (m *MockUseCase) CreateSubscription(authorId, targetId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", authorId, targetId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription
func (mr *MockUseCaseMockRecorder) CreateSubscription(authorId, targetId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockUseCase)(nil).CreateSubscription), authorId, targetId)
}

// RemoveSubscription mocks base method
func (m *MockUseCase) RemoveSubscription(authorId, targetId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSubscription", authorId, targetId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSubscription indicates an expected call of RemoveSubscription
func (mr *MockUseCaseMockRecorder) RemoveSubscription(authorId, targetId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSubscription", reflect.TypeOf((*MockUseCase)(nil).RemoveSubscription), authorId, targetId)
}

// GetProfile mocks base method
func (m *MockUseCase) GetProfile(userId int) (models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", userId)
	ret0, _ := ret[0].(models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile
func (mr *MockUseCaseMockRecorder) GetProfile(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockUseCase)(nil).GetProfile), userId)
}

// EditProfile mocks base method
func (m *MockUseCase) EditProfile(userId int, update models.ProfileUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditProfile", userId, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditProfile indicates an expected call of EditProfile
func (mr *MockUseCaseMockRecorder) EditProfile(userId, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProfile", reflect.TypeOf((*MockUseCase)(nil).EditProfile), userId, update)
}

// UploadProfilePic mocks base method
func (m *MockUseCase) UploadProfilePic(userId int, filename string, img io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadProfilePic", userId, filename, img)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadProfilePic indicates an expected call of UploadProfilePic
func (mr *MockUseCaseMockRecorder) UploadProfilePic(userId, filename, img interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadProfilePic", reflect.TypeOf((*MockUseCase)(nil).UploadProfilePic), userId, filename, img)
}

// SignUp mocks base method
func (m *MockUseCase) SignUp(cred models.Credentials) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", cred)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp
func (mr *MockUseCaseMockRecorder) SignUp(cred interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUseCase)(nil).SignUp), cred)
}

// Validate mocks base method
func (m *MockUseCase) Validate(cred models.Credentials) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", cred)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate
func (mr *MockUseCaseMockRecorder) Validate(cred interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockUseCase)(nil).Validate), cred)
}
