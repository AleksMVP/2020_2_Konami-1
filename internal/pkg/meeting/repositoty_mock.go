// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package meeting is a generated GoMock package.
package meeting

import (
	gomock "github.com/golang/mock/gomock"
	models "konami_backend/internal/pkg/models"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateMeeting mocks base method
func (m *MockRepository) CreateMeeting(meeting models.Meeting) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMeeting", meeting)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMeeting indicates an expected call of CreateMeeting
func (mr *MockRepositoryMockRecorder) CreateMeeting(meeting interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeeting", reflect.TypeOf((*MockRepository)(nil).CreateMeeting), meeting)
}

// GetMeeting mocks base method
func (m *MockRepository) GetMeeting(meetingId, userId int, authorized bool) (models.Meeting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeeting", meetingId, userId, authorized)
	ret0, _ := ret[0].(models.Meeting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeeting indicates an expected call of GetMeeting
func (mr *MockRepositoryMockRecorder) GetMeeting(meetingId, userId, authorized interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeeting", reflect.TypeOf((*MockRepository)(nil).GetMeeting), meetingId, userId, authorized)
}

// UpdateMeeting mocks base method
func (m *MockRepository) UpdateMeeting(userId int, update models.MeetingUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMeeting", userId, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeeting indicates an expected call of UpdateMeeting
func (mr *MockRepositoryMockRecorder) UpdateMeeting(userId, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeeting", reflect.TypeOf((*MockRepository)(nil).UpdateMeeting), userId, update)
}

// GetAll mocks base method
func (m *MockRepository) GetAll(userId int) ([]models.Meeting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userId)
	ret0, _ := ret[0].([]models.Meeting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockRepositoryMockRecorder) GetAll(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepository)(nil).GetAll), userId)
}

// FilterToday mocks base method
func (m *MockRepository) FilterToday(userId int) ([]models.Meeting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterToday", userId)
	ret0, _ := ret[0].([]models.Meeting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterToday indicates an expected call of FilterToday
func (mr *MockRepositoryMockRecorder) FilterToday(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterToday", reflect.TypeOf((*MockRepository)(nil).FilterToday), userId)
}

// FilterTomorrow mocks base method
func (m *MockRepository) FilterTomorrow(userId int) ([]models.Meeting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterTomorrow", userId)
	ret0, _ := ret[0].([]models.Meeting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterTomorrow indicates an expected call of FilterTomorrow
func (mr *MockRepositoryMockRecorder) FilterTomorrow(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTomorrow", reflect.TypeOf((*MockRepository)(nil).FilterTomorrow), userId)
}

// FilterFuture mocks base method
func (m *MockRepository) FilterFuture(userId int) ([]models.Meeting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterFuture", userId)
	ret0, _ := ret[0].([]models.Meeting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterFuture indicates an expected call of FilterFuture
func (mr *MockRepositoryMockRecorder) FilterFuture(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterFuture", reflect.TypeOf((*MockRepository)(nil).FilterFuture), userId)
}

// FilterLiked mocks base method
func (m *MockRepository) FilterLiked(userId int) ([]models.Meeting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterLiked", userId)
	ret0, _ := ret[0].([]models.Meeting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterLiked indicates an expected call of FilterLiked
func (mr *MockRepositoryMockRecorder) FilterLiked(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterLiked", reflect.TypeOf((*MockRepository)(nil).FilterLiked), userId)
}

// FilterRegistered mocks base method
func (m *MockRepository) FilterRegistered(userId int) ([]models.Meeting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterRegistered", userId)
	ret0, _ := ret[0].([]models.Meeting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterRegistered indicates an expected call of FilterRegistered
func (mr *MockRepositoryMockRecorder) FilterRegistered(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterRegistered", reflect.TypeOf((*MockRepository)(nil).FilterRegistered), userId)
}
