// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package meeting is a generated GoMock package.
package meeting

import (
	gomock "github.com/golang/mock/gomock"
	models "konami_backend/internal/pkg/models"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// CreateMeeting mocks base method
func (m *MockUseCase) CreateMeeting(authorId int, data models.MeetingData) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMeeting", authorId, data)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMeeting indicates an expected call of CreateMeeting
func (mr *MockUseCaseMockRecorder) CreateMeeting(authorId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeeting", reflect.TypeOf((*MockUseCase)(nil).CreateMeeting), authorId, data)
}

// GetMeeting mocks base method
func (m *MockUseCase) GetMeeting(meetingId, userId int, authorized bool) (models.MeetingDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeeting", meetingId, userId, authorized)
	ret0, _ := ret[0].(models.MeetingDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeeting indicates an expected call of GetMeeting
func (mr *MockUseCaseMockRecorder) GetMeeting(meetingId, userId, authorized interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeeting", reflect.TypeOf((*MockUseCase)(nil).GetMeeting), meetingId, userId, authorized)
}

// UpdateMeeting mocks base method
func (m *MockUseCase) UpdateMeeting(userId int, update models.MeetingUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMeeting", userId, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeeting indicates an expected call of UpdateMeeting
func (mr *MockUseCaseMockRecorder) UpdateMeeting(userId, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeeting", reflect.TypeOf((*MockUseCase)(nil).UpdateMeeting), userId, update)
}

// GetNextMeetings mocks base method
func (m *MockUseCase) GetNextMeetings(params FilterParams) ([]models.Meeting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextMeetings", params)
	ret0, _ := ret[0].([]models.Meeting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextMeetings indicates an expected call of GetNextMeetings
func (mr *MockUseCaseMockRecorder) GetNextMeetings(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextMeetings", reflect.TypeOf((*MockUseCase)(nil).GetNextMeetings), params)
}

// GetTopMeetings mocks base method
func (m *MockUseCase) GetTopMeetings(params FilterParams) ([]models.Meeting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopMeetings", params)
	ret0, _ := ret[0].([]models.Meeting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopMeetings indicates an expected call of GetTopMeetings
func (mr *MockUseCaseMockRecorder) GetTopMeetings(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopMeetings", reflect.TypeOf((*MockUseCase)(nil).GetTopMeetings), params)
}

// FilterLiked mocks base method
func (m *MockUseCase) FilterLiked(params FilterParams) ([]models.Meeting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterLiked", params)
	ret0, _ := ret[0].([]models.Meeting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterLiked indicates an expected call of FilterLiked
func (mr *MockUseCaseMockRecorder) FilterLiked(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterLiked", reflect.TypeOf((*MockUseCase)(nil).FilterLiked), params)
}

// FilterRegistered mocks base method
func (m *MockUseCase) FilterRegistered(params FilterParams) ([]models.Meeting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterRegistered", params)
	ret0, _ := ret[0].([]models.Meeting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterRegistered indicates an expected call of FilterRegistered
func (mr *MockUseCaseMockRecorder) FilterRegistered(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterRegistered", reflect.TypeOf((*MockUseCase)(nil).FilterRegistered), params)
}

// FilterRecommended mocks base method
func (m *MockUseCase) FilterRecommended(params FilterParams) ([]models.Meeting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterRecommended", params)
	ret0, _ := ret[0].([]models.Meeting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterRecommended indicates an expected call of FilterRecommended
func (mr *MockUseCaseMockRecorder) FilterRecommended(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterRecommended", reflect.TypeOf((*MockUseCase)(nil).FilterRecommended), params)
}

// FilterTagged mocks base method
func (m *MockUseCase) FilterTagged(params FilterParams, tagId int) ([]models.Meeting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterTagged", params, tagId)
	ret0, _ := ret[0].([]models.Meeting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterTagged indicates an expected call of FilterTagged
func (mr *MockUseCaseMockRecorder) FilterTagged(params, tagId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTagged", reflect.TypeOf((*MockUseCase)(nil).FilterTagged), params, tagId)
}

// FilterSimilar mocks base method
func (m *MockUseCase) FilterSimilar(params FilterParams, meetingId int) ([]models.Meeting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterSimilar", params, meetingId)
	ret0, _ := ret[0].([]models.Meeting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterSimilar indicates an expected call of FilterSimilar
func (mr *MockUseCaseMockRecorder) FilterSimilar(params, meetingId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterSimilar", reflect.TypeOf((*MockUseCase)(nil).FilterSimilar), params, meetingId)
}

// SearchMeetings mocks base method
func (m *MockUseCase) SearchMeetings(params FilterParams, meetingName string, limit int) ([]models.Meeting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMeetings", params, meetingName, limit)
	ret0, _ := ret[0].([]models.Meeting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMeetings indicates an expected call of SearchMeetings
func (mr *MockUseCaseMockRecorder) SearchMeetings(params, meetingName, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMeetings", reflect.TypeOf((*MockUseCase)(nil).SearchMeetings), params, meetingName, limit)
}
