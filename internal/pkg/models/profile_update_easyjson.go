// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson35d43efdDecodeKonamiBackendInternalPkgModels(in *jlexer.Lexer, out *ProfileUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "gender":
			if in.IsNull() {
				in.Skip()
				out.Gender = nil
			} else {
				if out.Gender == nil {
					out.Gender = new(string)
				}
				*out.Gender = string(in.String())
			}
		case "city":
			if in.IsNull() {
				in.Skip()
				out.City = nil
			} else {
				if out.City == nil {
					out.City = new(string)
				}
				*out.City = string(in.String())
			}
		case "birthday":
			if in.IsNull() {
				in.Skip()
				out.Birthday = nil
			} else {
				if out.Birthday == nil {
					out.Birthday = new(string)
				}
				*out.Birthday = string(in.String())
			}
		case "telegram":
			if in.IsNull() {
				in.Skip()
				out.Telegram = nil
			} else {
				if out.Telegram == nil {
					out.Telegram = new(string)
				}
				*out.Telegram = string(in.String())
			}
		case "vk":
			if in.IsNull() {
				in.Skip()
				out.Vk = nil
			} else {
				if out.Vk == nil {
					out.Vk = new(string)
				}
				*out.Vk = string(in.String())
			}
		case "meetingTags":
			if in.IsNull() {
				in.Skip()
				out.MeetingTags = nil
			} else {
				in.Delim('[')
				if out.MeetingTags == nil {
					if !in.IsDelim(']') {
						out.MeetingTags = make([]string, 0, 4)
					} else {
						out.MeetingTags = []string{}
					}
				} else {
					out.MeetingTags = (out.MeetingTags)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.MeetingTags = append(out.MeetingTags, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "education":
			if in.IsNull() {
				in.Skip()
				out.Education = nil
			} else {
				if out.Education == nil {
					out.Education = new(string)
				}
				*out.Education = string(in.String())
			}
		case "job":
			if in.IsNull() {
				in.Skip()
				out.Job = nil
			} else {
				if out.Job == nil {
					out.Job = new(string)
				}
				*out.Job = string(in.String())
			}
		case "aims":
			if in.IsNull() {
				in.Skip()
				out.Aims = nil
			} else {
				if out.Aims == nil {
					out.Aims = new(string)
				}
				*out.Aims = string(in.String())
			}
		case "interests":
			if in.IsNull() {
				in.Skip()
				out.Interests = nil
			} else {
				if out.Interests == nil {
					out.Interests = new(string)
				}
				*out.Interests = string(in.String())
			}
		case "skills":
			if in.IsNull() {
				in.Skip()
				out.Skills = nil
			} else {
				if out.Skills == nil {
					out.Skills = new(string)
				}
				*out.Skills = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson35d43efdEncodeKonamiBackendInternalPkgModels(out *jwriter.Writer, in ProfileUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"gender\":"
		out.RawString(prefix)
		if in.Gender == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Gender))
		}
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		if in.City == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.City))
		}
	}
	{
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		if in.Birthday == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Birthday))
		}
	}
	{
		const prefix string = ",\"telegram\":"
		out.RawString(prefix)
		if in.Telegram == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Telegram))
		}
	}
	{
		const prefix string = ",\"vk\":"
		out.RawString(prefix)
		if in.Vk == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Vk))
		}
	}
	{
		const prefix string = ",\"meetingTags\":"
		out.RawString(prefix)
		if in.MeetingTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.MeetingTags {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"education\":"
		out.RawString(prefix)
		if in.Education == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Education))
		}
	}
	{
		const prefix string = ",\"job\":"
		out.RawString(prefix)
		if in.Job == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Job))
		}
	}
	{
		const prefix string = ",\"aims\":"
		out.RawString(prefix)
		if in.Aims == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Aims))
		}
	}
	{
		const prefix string = ",\"interests\":"
		out.RawString(prefix)
		if in.Interests == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Interests))
		}
	}
	{
		const prefix string = ",\"skills\":"
		out.RawString(prefix)
		if in.Skills == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Skills))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfileUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson35d43efdEncodeKonamiBackendInternalPkgModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfileUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson35d43efdEncodeKonamiBackendInternalPkgModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfileUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson35d43efdDecodeKonamiBackendInternalPkgModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfileUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson35d43efdDecodeKonamiBackendInternalPkgModels(l, v)
}
