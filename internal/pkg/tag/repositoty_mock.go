// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package tag is a generated GoMock package.
package tag

import (
	gomock "github.com/golang/mock/gomock"
	models "konami_backend/internal/pkg/models"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetTagById mocks base method
func (m *MockRepository) GetTagById(id int) (models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagById", id)
	ret0, _ := ret[0].(models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagById indicates an expected call of GetTagById
func (mr *MockRepositoryMockRecorder) GetTagById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagById", reflect.TypeOf((*MockRepository)(nil).GetTagById), id)
}

// GetTagByName mocks base method
func (m *MockRepository) GetTagByName(name string) (models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagByName", name)
	ret0, _ := ret[0].(models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagByName indicates an expected call of GetTagByName
func (mr *MockRepositoryMockRecorder) GetTagByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagByName", reflect.TypeOf((*MockRepository)(nil).GetTagByName), name)
}

// CreateTag mocks base method
func (m *MockRepository) CreateTag(name string) (models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", name)
	ret0, _ := ret[0].(models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag
func (mr *MockRepositoryMockRecorder) CreateTag(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockRepository)(nil).CreateTag), name)
}

// GetOrCreateTag mocks base method
func (m *MockRepository) GetOrCreateTag(name string) (models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateTag", name)
	ret0, _ := ret[0].(models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateTag indicates an expected call of GetOrCreateTag
func (mr *MockRepositoryMockRecorder) GetOrCreateTag(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateTag", reflect.TypeOf((*MockRepository)(nil).GetOrCreateTag), name)
}

// FilterTags mocks base method
func (m *MockRepository) FilterTags(startsWith string) ([]models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterTags", startsWith)
	ret0, _ := ret[0].([]models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterTags indicates an expected call of FilterTags
func (mr *MockRepositoryMockRecorder) FilterTags(startsWith interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTags", reflect.TypeOf((*MockRepository)(nil).FilterTags), startsWith)
}
