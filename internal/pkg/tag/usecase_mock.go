// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package tag is a generated GoMock package.
package tag

import (
	gomock "github.com/golang/mock/gomock"
	models "konami_backend/internal/pkg/models"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetTagById mocks base method
func (m *MockUseCase) GetTagById(id int) (models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagById", id)
	ret0, _ := ret[0].(models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagById indicates an expected call of GetTagById
func (mr *MockUseCaseMockRecorder) GetTagById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagById", reflect.TypeOf((*MockUseCase)(nil).GetTagById), id)
}

// GetTagByName mocks base method
func (m *MockUseCase) GetTagByName(name string) (models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagByName", name)
	ret0, _ := ret[0].(models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagByName indicates an expected call of GetTagByName
func (mr *MockUseCaseMockRecorder) GetTagByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagByName", reflect.TypeOf((*MockUseCase)(nil).GetTagByName), name)
}

// CreateTag mocks base method
func (m *MockUseCase) CreateTag(name string) (models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", name)
	ret0, _ := ret[0].(models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag
func (mr *MockUseCaseMockRecorder) CreateTag(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockUseCase)(nil).CreateTag), name)
}

// GetOrCreateTag mocks base method
func (m *MockUseCase) GetOrCreateTag(name string) (models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateTag", name)
	ret0, _ := ret[0].(models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateTag indicates an expected call of GetOrCreateTag
func (mr *MockUseCaseMockRecorder) GetOrCreateTag(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateTag", reflect.TypeOf((*MockUseCase)(nil).GetOrCreateTag), name)
}

// FilterTags mocks base method
func (m *MockUseCase) FilterTags(startsWith string) ([]models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterTags", startsWith)
	ret0, _ := ret[0].([]models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterTags indicates an expected call of FilterTags
func (mr *MockUseCaseMockRecorder) FilterTags(startsWith interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTags", reflect.TypeOf((*MockUseCase)(nil).FilterTags), startsWith)
}
