// Code generated by MockGen. DO NOT EDIT.
// Source: konami_backend/proto/csrf (interfaces: CsrfDispatcherClient)

package csrf

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	csrf "konami_backend/proto/csrf"
	reflect "reflect"
)

// MockCsrfDispatcherClient is a mock of CsrfDispatcherClient interface
type MockCsrfDispatcherClient struct {
	ctrl     *gomock.Controller
	recorder *MockCsrfDispatcherClientMockRecorder
}

// MockCsrfDispatcherClientMockRecorder is the mock recorder for MockCsrfDispatcherClient
type MockCsrfDispatcherClientMockRecorder struct {
	mock *MockCsrfDispatcherClient
}

// NewMockCsrfDispatcherClient creates a new mock instance
func NewMockCsrfDispatcherClient(ctrl *gomock.Controller) *MockCsrfDispatcherClient {
	mock := &MockCsrfDispatcherClient{ctrl: ctrl}
	mock.recorder = &MockCsrfDispatcherClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCsrfDispatcherClient) EXPECT() *MockCsrfDispatcherClientMockRecorder {
	return m.recorder
}

// Check mocks base method
func (m *MockCsrfDispatcherClient) Check(arg0 context.Context, arg1 *csrf.CsrfToken, arg2 ...grpc.CallOption) (*csrf.IsValid, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Check", varargs...)
	ret0, _ := ret[0].(*csrf.IsValid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check
func (mr *MockCsrfDispatcherClientMockRecorder) Check(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockCsrfDispatcherClient)(nil).Check), varargs...)
}

// Create mocks base method
func (m *MockCsrfDispatcherClient) Create(arg0 context.Context, arg1 *csrf.CsrfData, arg2 ...grpc.CallOption) (*csrf.CsrfToken, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*csrf.CsrfToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockCsrfDispatcherClientMockRecorder) Create(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCsrfDispatcherClient)(nil).Create), varargs...)
}
